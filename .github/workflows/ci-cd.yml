name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  VERSION: ${{ github.ref_name }}
  CONTAINER_NAME: api-container
  NETWORK_NAME: app-network

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image_tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ env.VERSION }}

    steps:
      - uses: actions/checkout@v4

      # Thêm caching để tăng tốc build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Tối ưu cache
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Generate .env content
        id: env-content
        run: |
          cat << EOF > env.content
          ENV=${{ vars.ENV }}
          PORT=${{ vars.PORT }}
          GOOSE_DRIVER=${{ vars.GOOSE_DRIVER }}
          GOOSE_DBSTRING=${{ secrets.GOOSE_DBSTRING }}
          CONN_STR=${{ secrets.CONN_STR }}
          MAX_CONNECTIONS=${{ vars.MAX_CONNECTIONS }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          JWT_TOKEN_DURATION=${{ vars.JWT_TOKEN_DURATION }}
          ETHEREUM_URL=${{ vars.ETHEREUM_URL }}
          ETHEREUM_SECRET_KEY=${{ secrets.ETHEREUM_SECRET_KEY }}
          REDIS_ADDR=${{ vars.REDIS_ADDR }}
          REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_DB=${{ vars.REDIS_DB }}
          KAFKA_BROKERS=${{ vars.KAFKA_BROKERS }}
          KAFKA_TOPIC=${{ vars.KAFKA_TOPIC }}
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ vars.SMTP_PORT }}
          SMTP_USERNAME=${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          EOF

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        env:
          IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script_stop: true # Dừng khi gặp lỗi
          script: |
            # Cleanup
            if [ "$(docker ps -aq -f name=${{ env.CONTAINER_NAME }})" ]; then
              docker stop ${{ env.CONTAINER_NAME }}
              docker rm ${{ env.CONTAINER_NAME }}
            fi

            # Check network exists
            if ! docker network inspect ${{ env.NETWORK_NAME }} >/dev/null 2>&1; then
              docker network create ${{ env.NETWORK_NAME }}
            fi

            # Deploy container
            docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --restart unless-stopped \
              --network ${{ env.NETWORK_NAME }} \
              -p "${{ vars.PORT }}:${{ vars.PORT }}" \
              --env-file /home/${{ secrets.SERVER_USERNAME }}/.env \
              ${IMAGE_TAG}

            # Health check
            timeout 30s bash -c 'while ! curl -s http://localhost:${{ vars.PORT }}/health; do sleep 2; done'

            # Cleanup old images after successful deployment
            docker image prune -f --filter "until=24h"
