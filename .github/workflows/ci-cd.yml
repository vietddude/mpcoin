name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  VERSION: ${{ github.ref_name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            echo "Connected successfully!"

            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            # Pull the latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ env.VERSION }}

            # Stop and remove existing container
            docker stop api-container || true
            docker rm api-container || true

            # Run new container with environment variables
            docker run -d \
              --name api-container \
              --restart unless-stopped \
              --network app-network \
              -p ${{ vars.PORT }}:${{ vars.PORT }} \
              -e ENV="${{ vars.ENV }}" \
              -e PORT="${{ vars.PORT }}" \
              -e GOOSE_DRIVER="${{ vars.GOOSE_DRIVER }}" \
              -e GOOSE_DBSTRING="${{ secrets.GOOSE_DBSTRING }}" \
              -e CONN_STR="${{ secrets.CONN_STR }}" \
              -e MAX_CONNECTIONS="${{ vars.MAX_CONNECTIONS }}" \
              -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
              -e JWT_TOKEN_DURATION="${{ vars.JWT_TOKEN_DURATION }}" \
              -e ETHEREUM_URL="${{ vars.ETHEREUM_URL }}" \
              -e ETHEREUM_SECRET_KEY="${{ secrets.ETHEREUM_SECRET_KEY }}" \
              -e REDIS_ADDR="${{ vars.REDIS_ADDR }}" \
              -e REDIS_USERNAME="${{ secrets.REDIS_USERNAME }}" \
              -e REDIS_PASSWORD="${{ secrets.REDIS_PASSWORD }}" \
              -e REDIS_DB="${{ vars.REDIS_DB }}" \
              -e KAFKA_BROKERS="${{ vars.KAFKA_BROKERS }}" \
              -e KAFKA_TOPIC="${{ vars.KAFKA_TOPIC }}" \
              -e SMTP_HOST="${{ secrets.SMTP_HOST }}" \
              -e SMTP_PORT="${{ vars.SMTP_PORT }}" \
              -e SMTP_USERNAME="${{ secrets.SMTP_USERNAME }}" \
              -e SMTP_PASSWORD="${{ secrets.SMTP_PASSWORD }}" \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ env.VERSION }}

            # Clean up old images
            docker image prune -f

            # Verify container is running
            docker ps | grep api-container
