name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  VERSION: ${{ github.ref_name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        env:
          DEPLOY_ENV: ${{ vars.ENV }}
          DEPLOY_PORT: ${{ vars.PORT }}
          DEPLOY_GOOSE_DRIVER: ${{ vars.GOOSE_DRIVER }}
          DEPLOY_GOOSE_DBSTRING: ${{ secrets.GOOSE_DBSTRING }}
          DEPLOY_CONN_STR: ${{ secrets.CONN_STR }}
          DEPLOY_MAX_CONNECTIONS: ${{ vars.MAX_CONNECTIONS }}
          DEPLOY_JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          DEPLOY_JWT_TOKEN_DURATION: ${{ vars.JWT_TOKEN_DURATION }}
          DEPLOY_ETHEREUM_URL: ${{ vars.ETHEREUM_URL }}
          DEPLOY_ETHEREUM_SECRET_KEY: ${{ secrets.ETHEREUM_SECRET_KEY }}
          DEPLOY_REDIS_ADDR: ${{ vars.REDIS_ADDR }}
          DEPLOY_REDIS_USERNAME: ${{ secrets.REDIS_USERNAME }}
          DEPLOY_REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          DEPLOY_REDIS_DB: ${{ vars.REDIS_DB }}
          DEPLOY_KAFKA_BROKERS: ${{ vars.KAFKA_BROKERS }}
          DEPLOY_KAFKA_TOPIC: ${{ vars.KAFKA_TOPIC }}
          DEPLOY_SMTP_HOST: ${{ secrets.SMTP_HOST }}
          DEPLOY_SMTP_PORT: ${{ vars.SMTP_PORT }}
          DEPLOY_SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          DEPLOY_SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          DEPLOY_REGISTRY: ${{ env.REGISTRY }}
          DEPLOY_IMAGE_NAME: ${{ env.IMAGE_NAME }}
          DEPLOY_VERSION: ${{ env.VERSION }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          envs: DEPLOY_ENV,DEPLOY_PORT,DEPLOY_GOOSE_DRIVER,DEPLOY_GOOSE_DBSTRING,DEPLOY_CONN_STR,DEPLOY_MAX_CONNECTIONS,DEPLOY_JWT_SECRET_KEY,DEPLOY_JWT_TOKEN_DURATION,DEPLOY_ETHEREUM_URL,DEPLOY_ETHEREUM_SECRET_KEY,DEPLOY_REDIS_ADDR,DEPLOY_REDIS_USERNAME,DEPLOY_REDIS_PASSWORD,DEPLOY_REDIS_DB,DEPLOY_KAFKA_BROKERS,DEPLOY_KAFKA_TOPIC,DEPLOY_SMTP_HOST,DEPLOY_SMTP_PORT,DEPLOY_SMTP_USERNAME,DEPLOY_SMTP_PASSWORD,DEPLOY_REGISTRY,DEPLOY_IMAGE_NAME,DEPLOY_VERSION
          script: |
            # Create .env file on the server
            cat << EOF > .env
            ENV=${DEPLOY_ENV}
            PORT=${DEPLOY_PORT}
            GOOSE_DRIVER=${DEPLOY_GOOSE_DRIVER}
            GOOSE_DBSTRING=${DEPLOY_GOOSE_DBSTRING}
            CONN_STR=${DEPLOY_CONN_STR}
            MAX_CONNECTIONS=${DEPLOY_MAX_CONNECTIONS}
            JWT_SECRET_KEY=${DEPLOY_JWT_SECRET_KEY}
            JWT_TOKEN_DURATION=${DEPLOY_JWT_TOKEN_DURATION}
            ETHEREUM_URL=${DEPLOY_ETHEREUM_URL}
            ETHEREUM_SECRET_KEY=${DEPLOY_ETHEREUM_SECRET_KEY}
            REDIS_ADDR=${DEPLOY_REDIS_ADDR}
            REDIS_USERNAME=${DEPLOY_REDIS_USERNAME}
            REDIS_PASSWORD=${DEPLOY_REDIS_PASSWORD}
            REDIS_DB=${DEPLOY_REDIS_DB}
            KAFKA_BROKERS=${DEPLOY_KAFKA_BROKERS}
            KAFKA_TOPIC=${DEPLOY_KAFKA_TOPIC}
            SMTP_HOST=${DEPLOY_SMTP_HOST}
            SMTP_PORT=${DEPLOY_SMTP_PORT}
            SMTP_USERNAME=${DEPLOY_SMTP_USERNAME}
            SMTP_PASSWORD=${DEPLOY_SMTP_PASSWORD}
            EOF
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${DEPLOY_REGISTRY} -u ${{ github.actor }} --password-stdin
            
            # Pull the latest image
            docker pull ${DEPLOY_REGISTRY}/${DEPLOY_IMAGE_NAME}-api:${DEPLOY_VERSION}
            
            # Stop and remove existing container
            docker stop api-container || true
            docker rm api-container || true
            
            # Run new container with environment variables from file
            docker run -d \
              --name api-container \
              --restart unless-stopped \
              --network app-network \
              -p "${DEPLOY_PORT}:${DEPLOY_PORT}" \
              --env-file .env \
              ${DEPLOY_REGISTRY}/${DEPLOY_IMAGE_NAME}-api:${DEPLOY_VERSION}
            
            # Clean up old images
            docker image prune -f
            
            # Verify container is running
            docker ps | grep api-container