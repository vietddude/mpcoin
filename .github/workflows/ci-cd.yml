name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  VERSION: ${{ github.ref_name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.api
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        env:
          ENV: ${{ vars.ENV }}
          PORT: ${{ vars.PORT }}
          GOOSE_DRIVER: ${{ vars.GOOSE_DRIVER }}
          GOOSE_DBSTRING: ${{ secrets.GOOSE_DBSTRING }}
          CONN_STR: ${{ secrets.CONN_STR }}
          MAX_CONNECTIONS: ${{ vars.MAX_CONNECTIONS }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_TOKEN_DURATION: ${{ vars.JWT_TOKEN_DURATION }}
          ETHEREUM_URL: ${{ vars.ETHEREUM_URL }}
          ETHEREUM_SECRET_KEY: ${{ secrets.ETHEREUM_SECRET_KEY }}
          REDIS_ADDR: ${{ vars.REDIS_ADDR }}
          REDIS_USERNAME: ${{ secrets.REDIS_USERNAME }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_DB: ${{ vars.REDIS_DB }}
          KAFKA_BROKERS: ${{ vars.KAFKA_BROKERS }}
          KAFKA_TOPIC: ${{ vars.KAFKA_TOPIC }}
          SMTP_HOST: ${{ secrets.SMTP_HOST }}
          SMTP_PORT: ${{ vars.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          envs: |
            ENV
            PORT
            GOOSE_DRIVER
            GOOSE_DBSTRING
            CONN_STR
            MAX_CONNECTIONS
            JWT_SECRET_KEY
            JWT_TOKEN_DURATION
            ETHEREUM_URL
            ETHEREUM_SECRET_KEY
            REDIS_ADDR
            REDIS_USERNAME
            REDIS_PASSWORD
            REDIS_DB
            KAFKA_BROKERS
            KAFKA_TOPIC
            SMTP_HOST
            SMTP_PORT
            SMTP_USERNAME
            SMTP_PASSWORD
            REGISTRY
            IMAGE_NAME
            VERSION
          script: |
            # Create .env file on the server
            cat << 'EOF' > .env
            ENV=${ENV}
            PORT=${PORT}
            GOOSE_DRIVER=${GOOSE_DRIVER}
            GOOSE_DBSTRING=${GOOSE_DBSTRING}
            CONN_STR=${CONN_STR}
            MAX_CONNECTIONS=${MAX_CONNECTIONS}
            JWT_SECRET_KEY=${JWT_SECRET_KEY}
            JWT_TOKEN_DURATION=${JWT_TOKEN_DURATION}
            ETHEREUM_URL=${ETHEREUM_URL}
            ETHEREUM_SECRET_KEY=${ETHEREUM_SECRET_KEY}
            REDIS_ADDR=${REDIS_ADDR}
            REDIS_USERNAME=${REDIS_USERNAME}
            REDIS_PASSWORD=${REDIS_PASSWORD}
            REDIS_DB=${REDIS_DB}
            KAFKA_BROKERS=${KAFKA_BROKERS}
            KAFKA_TOPIC=${KAFKA_TOPIC}
            SMTP_HOST=${SMTP_HOST}
            SMTP_PORT=${SMTP_PORT}
            SMTP_USERNAME=${SMTP_USERNAME}
            SMTP_PASSWORD=${SMTP_PASSWORD}
            EOF
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${REGISTRY} -u ${{ github.actor }} --password-stdin
            
            # Pull the latest image
            docker pull ${REGISTRY}/${IMAGE_NAME}-api:${VERSION}
            
            # Stop and remove existing container
            docker stop api-container || true
            docker rm api-container || true
            
            # Run new container with environment variables from file
            docker run -d \
              --name api-container \
              --restart unless-stopped \
              --network app-network \
              -p ${PORT}:${PORT} \
              --env-file .env \
              ${REGISTRY}/${IMAGE_NAME}-api:${VERSION}
            
            # Clean up old images
            docker image prune -f
            
            # Verify container is running
            docker ps | grep api-container